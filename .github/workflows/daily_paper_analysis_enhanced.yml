name: Enhanced Daily Paper Analysis

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 00:00 (北京时间 08:00)
  workflow_dispatch:     # 手动触发
    inputs:
      max_papers:
        description: '最大论文数量'
        required: false
        default: '50'
        type: string
      search_days:
        description: '搜索天数'
        required: false
        default: '2'
        type: string
      categories:
        description: '论文类别 (逗号分隔)'
        required: false
        default: 'cs.AI,cs.LG,cs.CL'
        type: string

env:
  PYTHON_VERSION: '3.12'
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  # 环境验证作业
  validate-environment:
    name: 🔍 环境验证
    runs-on: ubuntu-latest
    outputs:
      env-valid: ${{ steps.validate.outputs.valid }}
      config-summary: ${{ steps.config.outputs.summary }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install validation dependencies
      run: uv sync --frozen --no-dev
    
    - name: Validate environment variables
      id: validate
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
      run: |
        echo "🔍 开始环境验证..."
        if uv run scripts/validate_env.py; then
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "✅ 环境验证通过"
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "❌ 环境验证失败"
          exit 1
        fi
    
    - name: Generate configuration summary
      id: config
      run: |
        echo "📋 生成配置摘要..."
        SUMMARY="配置信息:
        - 最大论文数: ${{ github.event.inputs.max_papers || '50' }}
        - 搜索天数: ${{ github.event.inputs.search_days || '2' }}
        - 论文类别: ${{ github.event.inputs.categories || 'cs.AI,cs.LG,cs.CL' }}
        - Python 版本: ${{ env.PYTHON_VERSION }}
        - 执行时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # 性能基准测试作业
  benchmark:
    name: 📊 性能基准测试
    needs: validate-environment
    if: needs.validate-environment.outputs.env-valid == 'true'
    runs-on: ubuntu-latest
    outputs:
      benchmark-results: ${{ steps.benchmark.outputs.results }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync --frozen --no-dev
    
    - name: Run benchmark tests
      id: benchmark
      run: |
        echo "📊 开始性能基准测试..."
        uv run scripts/benchmark.py | tee benchmark_results.txt
        
        # 提取关键性能指标
        SEARCH_TIME=$(grep "搜索时间" benchmark_results.txt | grep -o '[0-9.]*' | head -1)
        FORMAT_TIME=$(grep "格式化时间" benchmark_results.txt | grep -o '[0-9.]*' | head -1)
        MEMORY_USAGE=$(grep "内存使用" benchmark_results.txt | grep -o '[0-9.]*' | head -1)
        
        RESULTS="性能指标:
        - 搜索时间: ${SEARCH_TIME:-N/A} 秒
        - 格式化时间: ${FORMAT_TIME:-N/A} 秒  
        - 内存使用: ${MEMORY_USAGE:-N/A} MB"
        
        echo "results<<EOF" >> $GITHUB_OUTPUT
        echo "$RESULTS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_number }}
        path: benchmark_results.txt
        retention-days: 30

  # 主要论文分析作业
  analyze-papers:
    name: 📚 论文分析
    needs: [validate-environment, benchmark]
    if: needs.validate-environment.outputs.env-valid == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --frozen
    
    - name: Create necessary directories
      run: |
        mkdir -p src/papers
        mkdir -p src/templates
        mkdir -p src/logs
    
    - name: Run project status check
      run: |
        echo "📊 项目状态检查..."
        uv run scripts/project_status.py > project_status.txt
    
    - name: Run paper analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        CATEGORIES: ${{ github.event.inputs.categories || 'cs.AI,cs.LG,cs.CL' }}
        MAX_PAPERS: ${{ github.event.inputs.max_papers || '50' }}
        SEARCH_DAYS: ${{ github.event.inputs.search_days || '2' }}
      run: |
        cd src
        echo "🚀 开始论文分析..."
        echo "配置信息:"
        echo "- 类别: $CATEGORIES"
        echo "- 最大论文数: $MAX_PAPERS"
        echo "- 搜索天数: $SEARCH_DAYS"
        echo ""
        
        # 运行主程序
        uv run python main.py
        
        echo "✅ 论文分析完成"
    
    - name: Generate comprehensive report
      run: |
        echo "📝 生成综合报告..."
        
        cat > daily_analysis_report.md << 'EOF'
        # 📚 每日论文分析报告
        
        **生成时间**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')  
        **工作流运行**: #${{ github.run_number }}  
        **提交哈希**: ${{ github.sha }}
        
        ## 📋 配置信息
        ${{ needs.validate-environment.outputs.config-summary }}
        
        ## 📊 性能指标
        ${{ needs.benchmark.outputs.benchmark-results }}
        
        ## 📝 分析结果
        EOF
        
        if [ -f src/conclusion.md ]; then
          echo "" >> daily_analysis_report.md
          cat src/conclusion.md >> daily_analysis_report.md
        else
          echo "⚠️ 未找到分析结果文件" >> daily_analysis_report.md
        fi
        
        echo "" >> daily_analysis_report.md
        echo "## 🔧 系统信息" >> daily_analysis_report.md
        echo '```' >> daily_analysis_report.md
        cat project_status.txt >> daily_analysis_report.md
        echo '```' >> daily_analysis_report.md
    
    - name: Upload analysis artifacts
      uses: actions/upload-artifact@v4
      with:
        name: analysis-artifacts-${{ github.run_number }}
        path: |
          src/conclusion.md
          src/logs/*.log
          daily_analysis_report.md
          project_status.txt
        retention-days: 30
    
    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # 添加分析结果
        git add src/conclusion.md || echo "No conclusion.md to add"
        git add daily_analysis_report.md
        git add src/logs/ || echo "No logs to add"
        
        # 检查是否有更改
        if git diff --staged --quiet; then
          echo "📝 没有新的分析结果需要提交"
        else
          git commit -m "📚 Daily paper analysis - $(date +'%Y-%m-%d %H:%M:%S UTC')

          🤖 Automated analysis results
          
          📊 执行信息:
          - 工作流运行: #${{ github.run_number }}
          - 提交哈希: ${{ github.sha }}
          - 执行时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          ⚙️ 配置:
          - 最大论文数: ${{ github.event.inputs.max_papers || '50' }}
          - 搜索天数: ${{ github.event.inputs.search_days || '2' }}
          - 论文类别: ${{ github.event.inputs.categories || 'cs.AI,cs.LG,cs.CL' }}"
          
          git push
          echo "✅ 分析结果已提交到仓库"
        fi

  # 通知作业
  notify-results:
    name: 📢 结果通知
    needs: [validate-environment, benchmark, analyze-papers]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Determine workflow status
      id: status
      run: |
        if [[ "${{ needs.validate-environment.result }}" == "success" && 
              "${{ needs.benchmark.result }}" == "success" && 
              "${{ needs.analyze-papers.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ 每日论文分析成功完成" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ 每日论文分析执行失败" >> $GITHUB_OUTPUT
        fi
    
    - name: Create status summary
      run: |
        echo "## 📊 工作流执行摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**状态**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "**时间**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**运行**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 作业状态" >> $GITHUB_STEP_SUMMARY
        echo "- 环境验证: ${{ needs.validate-environment.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 性能基准: ${{ needs.benchmark.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 论文分析: ${{ needs.analyze-papers.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.status.outputs.status }}" == "failure" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 故障排除建议" >> $GITHUB_STEP_SUMMARY
          echo "1. 检查 GitHub Secrets 配置" >> $GITHUB_STEP_SUMMARY
          echo "2. 验证 API 密钥和邮件配置" >> $GITHUB_STEP_SUMMARY
          echo "3. 查看工作流日志获取详细错误信息" >> $GITHUB_STEP_SUMMARY
          echo "4. 检查 ArXiv 服务可用性" >> $GITHUB_STEP_SUMMARY
        fi 